#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp W      &kp E      &kp R                       &kp T                                                                           &kp Y        &kp U  &lt 5 I    &kp O    &kp P
&kp A      &kp S      &kp D      &kp F                       &kp G        &kp LS(LG(S))                             &kp MINUS                &kp H        &kp J  &kp K      &kp L    &kp KP_MINUS
&kp Z      &kp X      &kp C      &kp V                       &kp B        &msc MOVE_X 10                            &kp LANG_ZENKAKUHANKAKU  &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp CLEAR  &kp CLEAR  &kp CLEAR  &lt_to_layer_0 1 BACKSPACE  &lt 2 SPACE  &lt_to_layer_0 3 LANG_ZENKAKUHANKAKU      &kp BACKSPACE            &lt 1 ENTER                             &kp DEL
            >;
        };

        FUNCTION {
            bindings = <
&kp LS(Q)  &kp LS(W)  &kp LS(E)  &kp R   &kp T                       &kp Y   &kp U  &kp I   &kp O   &kp P
&kp A      &kp S      &kp D      &kp F   &kp G   &kp H       &kp J   &kp H   &kp J  &kp K   &kp L   &kp F10
&kp Z      &kp X      &kp C      &kp V   &kp B   &trans      &trans  &kp N   &kp M  &trans  &trans  &kp F11
&trans     &trans     &trans     &trans  &trans  &trans      &trans  &trans                         &kp F12
            >;
        };

        NUM {
            bindings = <
&kp AT_SIGN     &kp RIGHT_ALT  &kp EXCLAMATION  &kp DOUBLE_QUOTES  &kp LEFT_PARENTHESIS                      &kp RIGHT_PARENTHESIS  &kp LEFT      &kp UP_ARROW    &kp RIGHT  &kp BACKSPACE
&kp LEFT_SHIFT  &kp LCTRL      &kp EQUAL        &kp ASTERISK       &kp PLUS              &trans      &trans  &kp T                  &mkp MB1      &kp DOWN_ARROW  &mkp MB2   &kp SLASH
&kp Z           &kp X          &kp C            &kp V              &kp DELETE            &trans      &trans  &kp INTERNATIONAL_5    &kp LEFT_ALT  &kp F2          &kp F13    &kp PRINTSCREEN
&trans          &trans         &trans           &trans             &trans                &trans      &trans  &trans                                                          &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE  &kp CLEAR       &kp CLEAR     &kp AMPERSAND  &trans                               &kp NUMBER_6          &kp N7                &kp N8        &kp N9        &kp N0
&kp LCTRL   &kp LEFT_SHIFT  &kp LEFT_ALT  &kp CLEAR      &kp CLEAR  &trans      &trans        &kp NUMBER_1          &kp NUMBER_2          &kp NUMBER_3  &kp NUMBER_4  &kp N5
&kp CLEAR   &kp CLEAR       &trans        &trans         &trans     &trans      &trans        &kp LS(LC(NUMBER_1))  &kp LS(LC(NUMBER_2))  &kp CLEAR     &kp CLEAR     &kp CLEAR
&trans      &trans          &trans        &trans         &trans     &trans      &kp KP_ENTER  &trans                                                                  &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
